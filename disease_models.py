# -*- coding: utf-8 -*-
"""Disease Models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1houv84FlP_1IiB6lfqH97I56JimYc8Yx

# **BREAST CANCER**

### **`Data Exploration and Cleaning`**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split

#0-->Malignant
#1-->Benign
data_frame = sklearn.datasets.load_breast_cancer()
BreastCancer_dataset = pd.DataFrame(data_frame.data, columns = data_frame.feature_names)
BreastCancer_dataset['label'] = data_frame.target

BreastCancer_dataset.shape

# checking for missing values
BreastCancer_dataset.isnull().sum()

BreastCancer_dataset.describe()

Features = BreastCancer_dataset.drop(columns='label', axis=1)
Labels= BreastCancer_dataset['label']

Labels.head(9)

"""### **`Training and Testing`**






"""

Features_train, Features_test, Labels_train, Labels_test = train_test_split(Features, Labels, test_size=0.2, random_state=1)
print(Features.shape, Features_train.shape, Features_test.shape)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
Features_train_std = scaler.fit_transform(Features_train)
Features_test_std = scaler.transform(Features_test)

"""
### **`Neural Network`**"""

import tensorflow as tf 
tf.random.set_seed(3)
from tensorflow import keras

model = keras.Sequential([keras.layers.Flatten(input_shape=(30,)),
                          keras.layers.Dense(20, activation='relu'),
                          keras.layers.Dense(2, activation='sigmoid')])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = model.fit(Features_train_std, Labels_train, validation_split=0.1, epochs=10)

"""### **`Accuracy and Loss Visualization`**"""

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
axs[0].plot(history.history['accuracy'])
axs[0].plot(history.history['val_accuracy'])
axs[0].set_title('model accuracy')
axs[0].set_ylabel('accuracy')
axs[0].set_xlabel('epoch')
axs[0].legend(['training data', 'validation data'], loc = 'lower right')

axs[1].plot(history.history['loss'])
axs[1].plot(history.history['val_loss'])
axs[1].set_title('model loss')
axs[1].set_ylabel('loss')
axs[1].set_xlabel('epoch')
axs[1].legend(['training data', 'validation data'], loc = 'upper right')

"""### **`Validating Test Data`**"""

loss, accuracy = model.evaluate(Features_test_std, Labels_test)
print(accuracy)

"""### **`Predective Modelling`**"""

Y_pred = model.predict(Features_test_std)
Y_pred_labels = [np.argmax(i) for i in Y_pred]
print(Y_pred_labels)

input_data = (11.76,21.6,74.72,427.9,0.08637,0.04966,0.01657,0.01115,0.1495,0.05888,0.4062,1.21,2.635,28.47,0.005857,0.009758,0.01168,0.007445,0.02406,0.001769,12.98,25.72,82.98,516.5,0.1085,0.08615,0.05523,0.03715,0.2433,0.06563)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
input_data_std = scaler.transform(input_data_reshaped)
prediction = model.predict(input_data_std)
prediction_label = [np.argmax(prediction)]
if(prediction_label[0] == 0):
  print('The tumor is Malignant')
else:
  print('The tumor is Benign')

"""# **DIABETES**

### **`Data Exploration and Cleaning`**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('diabetes.csv')
diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

#0 --> Non-Diabetic
#1 --> Diabetic
diabetes_dataset.groupby('Outcome').mean()

Features_D = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Labels_D = diabetes_dataset['Outcome']

"""### **`Training and Testing`**"""

scaler = StandardScaler()
scaler.fit(Features_D)
standardized_data=scaler.transform(Features_D)

Features_D_train, Features_D_test, Labels_D_train, Labels_D_test = train_test_split(standardized_data,Labels_D, test_size = 0.2, stratify=Labels_D, random_state=1)

print(Features_D.shape, Features_D_train.shape, Features_D_test.shape)

"""### **`Support Vector Machine`**"""

classifier = svm.SVC(kernel='rbf', C=0.2, random_state=22)
classifier.fit(Features_D_train, Labels_D_train)

"""### **`Accuracy and Loss Visualization`**"""

X_train_prediction = classifier.predict(Features_D_train)
training_data_accuracy = accuracy_score(X_train_prediction, Labels_D_train)
print('Accuracy score of the training data : ', training_data_accuracy)

"""### **`Validating Test Data`**"""

X_test_prediction = classifier.predict(Features_D_test)
test_data_accuracy = accuracy_score(X_test_prediction, Labels_D_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""### **`Predective Modelling`**"""

input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array_D = np.asarray(input_data)
input_data_reshaped_D = input_data_as_numpy_array_D.reshape(1,-1)
std_data= scaler.transform(input_data_reshaped_D)
prediction_D = classifier.predict(std_data)
if (prediction_D[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""# **HEART DISEASES**

### **`Data Exploration and Cleaning`**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

heart_data = pd.read_csv('heart.csv')
heart_data.head()

heart_data.shape

heart_data.isnull().sum()

heart_data.describe()

#0 --> Healthy Heart
#1 --> Defective Heart
heart_data['target'].value_counts()

Features_H = heart_data.drop(columns='target', axis=1)
Labels_H = heart_data['target']

"""### **`Training and Testing`**

"""

Features_H_train, Features_H_test, Labels_H_train, Labels_H_test = train_test_split(Features_H, Labels_H, test_size=0.2, stratify=Labels_H, random_state=1)

print(Features_H.shape, Features_H_train.shape, Features_H_test.shape)

"""### **`Logistic Regression`**

"""

model = LogisticRegression(max_iter=1000)
model.fit(Features_H_train, Labels_H_train)

"""### **`Accuracy and Loss Visualization`**"""

X_train_prediction = model.predict(Features_H_train)
training_data_accuracy = accuracy_score(X_train_prediction, Labels_H_train)
print('Accuracy on Training data : ', training_data_accuracy)

"""### **`Validating Test Data`**"""

X_test_prediction = model.predict(Features_H_test)
test_data_accuracy = accuracy_score(X_test_prediction,Labels_H_test)
print('Accuracy on Test data : ', test_data_accuracy)

"""### **`Predective Modelling`**

"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')



"""# **Parkinson's Disease Detection** """

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

parkinsons_data = pd.read_csv('parkinsons.csv')
parkinsons_data.head()
print(parkinsons_data.shape)

parkinsons_data.isnull().sum()

parkinsons_data.describe()

#1  --> Parkinson's Positive
#0 --> Healthy
parkinsons_data['status'].value_counts()

X = parkinsons_data.drop(columns=['name','status'], axis=1)
Y = parkinsons_data['status']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

model = svm.SVC(kernel='linear')
model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")